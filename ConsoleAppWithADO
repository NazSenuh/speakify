
using System;
using System.Collections.Generic;
using System.Data;
using Npgsql;

namespace Speakify2
{
    class Program
    {
        static string connectionString = "Host=localhost;Port=5432;Database=Speakify2;Username=postgres;Password=veryhomohehe;";
        static Random random = new Random();

        static void Main(string[] args)
        {
            Console.WriteLine("Підключення до бази даних та робота з нею");

            using (NpgsqlConnection connection = new NpgsqlConnection(connectionString))
            {
                try
                {
                    connection.Open();
                    Console.WriteLine("Підключення успішно встановлено.");

                    Console.WriteLine("\nДані з таблиці users:");
                    DisplayUserData(connection);

                    Console.WriteLine("\nЗаповнення таблиць тестовими даними...");
                    FillTablesWithTestData(connection);

                    Console.WriteLine("\nОновлені дані з таблиці users:");
                    DisplayUserData(connection);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Помилка: {ex.Message}");
                }
            }

            Console.WriteLine("\nНатисніть будь-яку клавішу для завершення...");
            Console.ReadKey();
        }

        private static void DisplayUserData(NpgsqlConnection connection)
        {
            string query = "SELECT * FROM users";

            using (NpgsqlCommand command = new NpgsqlCommand(query, connection))
            {
                using (NpgsqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Console.WriteLine($"UserID: {reader["user_id"]}, Email: {reader["email"]}, Username: {reader["user_name"]}");
                    }
                }
            }
        }

        private static void FillTablesWithTestData(NpgsqlConnection connection)
        {
            // Генерація тестових даних для таблиць
            for (int i = 0; i < 50; i++)
            {
                string email = GenerateRandomEmail();
                string username = GenerateRandomUsername();
                string password = GenerateRandomPassword();
                string userRole = "User"; // Роль користувача
                InsertUser(connection, email, username, password, userRole);
            }

            for (int i = 0; i < 50; i++)
            {
                string trackName = GenerateRandomTrackName();
                string trackFile = GenerateRandomTrackFile();
                InsertTrack(connection, trackName, trackFile);
            }

            string[] listComments = { "Great track!", "Love it!", "Amazing work!", "Good job!", "Nice track!" };

            for (int i = 0; i < 50; i++)
            {
                int randomTrackID = random.Next(1, 51);
                int randomUserID = random.Next(1, 51);
                string comment = listComments[random.Next(listComments.Length)];

                InsertTrackComment(connection, comment, randomTrackID, randomUserID);
                InsertLike(connection, randomTrackID, randomUserID);
            }
        }
        private static string GenerateRandomEmail()
        {
            return $"user{random.Next(1000)}@example.com";
        }

        private static string GenerateRandomUsername()
        {
            return $"user{random.Next(1000)}";
        }

        private static string GenerateRandomPassword()
        {
            const string characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            char[] password = new char[8];

            for (int i = 0; i < 8; i++)
            {
                password[i] = characters[random.Next(characters.Length)];
            }

          
return new string(password);
        }
        private static string GenerateRandomTrackName()
        {
            string[] trackNames = { "Track 1", "Track 2", "Track 3", "Track 4", "Track 5" };
            return trackNames[random.Next(trackNames.Length)];
        }

        private static string GenerateRandomTrackFile()
        {
            return $"https://example.com/track{random.Next(10)}.mp3";
        }

        static void InsertUser(NpgsqlConnection connection, string email, string username, string password, string userRole)
        {
            string insertQuery = "INSERT INTO users (user_name, email, user_password, user_role) VALUES (@UserName, @Email, @Password, @UserRole)";

            using (NpgsqlCommand command = new NpgsqlCommand(insertQuery, connection))
            {
                command.Parameters.AddWithValue("@UserName", username);
                command.Parameters.AddWithValue("@Email", email);
                command.Parameters.AddWithValue("@Password", password);
                command.Parameters.AddWithValue("@UserRole", userRole);
                command.ExecuteNonQuery();
            }
        }

        static void InsertTrack(NpgsqlConnection connection, string trackName, string trackFile)
        {
            string insertQuery = "INSERT INTO tracks (track_name, track_file) VALUES (@TrackName, @TrackFile) RETURNING track_id";

            using (NpgsqlCommand command = new NpgsqlCommand(insertQuery, connection))
            {
                command.Parameters.AddWithValue("@TrackName", trackName);
                command.Parameters.AddWithValue("@TrackFile", trackFile);

                int trackId = (int)command.ExecuteScalar();

                Console.WriteLine($"Додано запис з ID: {trackId}");
            }
        }


        static void InsertTrackComment(NpgsqlConnection connection, string comment, int trackID, int userID)
        {
            string insertQuery = "INSERT INTO track_comments (track_comment, track_id, user_id) VALUES (@TrackComment, @TrackID, @UserID)";

            using (NpgsqlCommand command = new NpgsqlCommand(insertQuery, connection))
            {
                command.Parameters.AddWithValue("@TrackComment", comment);
                command.Parameters.AddWithValue("@TrackID", trackID);
                command.Parameters.AddWithValue("@UserID", userID);
                command.ExecuteNonQuery();
            }
        }

        static void InsertLike(NpgsqlConnection connection, int trackID, int userID)
        {
            string insertQuery = "INSERT INTO likes (track_id, user_id) VALUES (@TrackID, @UserID)";

            using (NpgsqlCommand command = new NpgsqlCommand(insertQuery, connection))
            {
                command.Parameters.AddWithValue("@TrackID", trackID);
                command.Parameters.AddWithValue("@UserID", userID);
                command.ExecuteNonQuery();
            }
        }
    }
}
